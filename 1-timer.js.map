{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\n\nconst datetimePicker = document.getElementById('datetime-picker');\nconst startButton = document.querySelector('[data-start]');\nconst timerFields = {\n    days: document.querySelector('[data-days]'),\n    hours: document.querySelector('[data-hours]'),\n    minutes: document.querySelector('[data-minutes]'),\n    seconds: document.querySelector('[data-seconds]')\n};\n\nlet userSelectedDate;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n      userSelectedDate = selectedDates[0];\n      if (userSelectedDate < Date.now()) {\n          iziToast.error({\n              title: 'Error',\n              message: 'Please choose a date in the future',\n          });\n          startButton.disabled = true;\n      } else {\n          startButton.disabled = false;\n      }\n  },\n};\n\nflatpickr(datetimePicker, options);\n\nstartButton.addEventListener('click', () => {\n    startButton.disabled = true;\n    datetimePicker.disabled = true;\n\n    const intervalId = setInterval(() => {\n        const currentTime = Date.now();\n        const timeDifference = userSelectedDate - currentTime;\n\n        if (timeDifference <= 0) {\n            clearInterval(intervalId);\n            updateTimer(0);\n            return;\n        }\n\n        updateTimer(timeDifference);\n    }, 1000);\n});\n\nfunction updateTimer(ms) {\n  const { days, hours, minutes, seconds } = convertMs(ms);\n  timerFields.days.textContent = addLeadingZero(days);\n  timerFields.hours.textContent = addLeadingZero(hours);\n  timerFields.minutes.textContent = addLeadingZero(minutes);\n  timerFields.seconds.textContent = addLeadingZero(seconds);\n}\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nfunction addLeadingZero(value) {\n  return String(value).padStart(2, '0');\n}"],"names":["datetimePicker","startButton","timerFields","userSelectedDate","options","selectedDates","iziToast","flatpickr","intervalId","currentTime","timeDifference","updateTimer","ms","days","hours","minutes","seconds","convertMs","addLeadingZero","value"],"mappings":"2FAMA,MAAMA,EAAiB,SAAS,eAAe,iBAAiB,EAC1DC,EAAc,SAAS,cAAc,cAAc,EACnDC,EAAc,CAChB,KAAM,SAAS,cAAc,aAAa,EAC1C,MAAO,SAAS,cAAc,cAAc,EAC5C,QAAS,SAAS,cAAc,gBAAgB,EAChD,QAAS,SAAS,cAAc,gBAAgB,CACpD,EAEA,IAAIC,EAEJ,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACnBF,EAAmBE,EAAc,CAAC,EAC9BF,EAAmB,KAAK,OACxBG,EAAS,MAAM,CACX,MAAO,QACP,QAAS,oCACvB,CAAW,EACDL,EAAY,SAAW,IAEvBA,EAAY,SAAW,EAE9B,CACH,EAEAM,EAAUP,EAAgBI,CAAO,EAEjCH,EAAY,iBAAiB,QAAS,IAAM,CACxCA,EAAY,SAAW,GACvBD,EAAe,SAAW,GAE1B,MAAMQ,EAAa,YAAY,IAAM,CACjC,MAAMC,EAAc,KAAK,MACnBC,EAAiBP,EAAmBM,EAE1C,GAAIC,GAAkB,EAAG,CACrB,cAAcF,CAAU,EACxBG,EAAY,CAAC,EACb,MACH,CAEDA,EAAYD,CAAc,CAC7B,EAAE,GAAI,CACX,CAAC,EAED,SAASC,EAAYC,EAAI,CACvB,KAAM,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYC,EAAUL,CAAE,EACtDV,EAAY,KAAK,YAAcgB,EAAeL,CAAI,EAClDX,EAAY,MAAM,YAAcgB,EAAeJ,CAAK,EACpDZ,EAAY,QAAQ,YAAcgB,EAAeH,CAAO,EACxDb,EAAY,QAAQ,YAAcgB,EAAeF,CAAO,CAC1D,CAEA,SAASC,EAAUL,EAAI,CAMrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAC1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EACpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EACjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,SAASE,EAAeC,EAAO,CAC7B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACtC"}